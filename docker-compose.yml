version: "3.8"
services:
  backend:
    container_name: tiflo_backend
    depends_on:
      postgres:
        condition: service_started
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ${CONFIG}:/configs
      - ${MEDIA}:/media
    restart: always

  postgres:
    env_file:
      - .env
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      -  ${PG_DATA}:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/initdb.sql
    restart: always

  redis:
    env_file:
      - .env
    image: redis:6.2-alpine
    container_name: redis
    restart: always
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - ${REDIS_DATA}:/data

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - '80:80'
    volumes:
      - ${FRONT_BUILD}:/dist
      - ${FRONT_ASSETS}:/assets
      - ${NGINX_LOGS}:/var/log/nginx
      - ${NGINX_CONF}:/etc/nginx/nginx.conf
      - ${MEDIA}:/media

  # image2text:
  #   container_name: image2text
  #   build:
  #     context: ${ML_REPO}/image2text
  #     dockerfile: Dockerfile
  #   command: python img_server.py
  #   volumes:
  #     - ${ML_REPO}/image2text:/app
  #     - ${MEDIA}:/data
  #   ports:
  #     - 8090:8080

  # text2voice:
  #   container_name: text2voice
  #   build:
  #     context: ${ML_REPO}/text2voice
  #     dockerfile: docker/Dockerfile
  #   command: python server.py
  #   volumes:
  #     - ${ML_REPO}/text2voice:/app
  #   ports:
  #     - 8086:8080
